// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Modelos de Autenticación ---
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  ownedTenant   Tenant?      @relation("TenantOwner")
  memberships   TenantUser[]
  crmContacts   CrmContact[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- Modelos de la Aplicación ---
model Tenant {
  id            String   @id @default(cuid())
  name          String
  activeModules String[]
  visualConfig  Json
  ownerId       String   @unique
  owner         User     @relation("TenantOwner", fields: [ownerId], references: [id])
  subscription  Subscription?
  memberships   TenantUser[]
  invitations   Invitation[]
}

model CrmContact {
  id      String @id @default(cuid())
  name    String
  email   String @unique
  company String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id             String  @id @default(cuid())
  tenantId       String  @unique
  tenant         Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customerId     String
  subscriptionId String
  plan           String
  status         String
}

model TenantUser {
  tenantId String
  userId   String
  role     TenantRole

  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([tenantId, userId])
}

model Invitation {
  id       String     @id @default(cuid())
  tenantId String
  email    String
  role     TenantRole
  accepted Boolean    @default(false)

  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, email])
}

enum TenantRole {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}
